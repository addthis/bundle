com.addthis.bundle.value.ValueFactory.sorted-maps = false

plugins {
  bundle {
    _class: com.addthis.bundle.core.Bundle
    _default: list
    list: list.ListBundle
    kv: kvp.KVBundle
    index: index.IndexBundle
    map: util.map.MapBundle
  }

  value-field {
    _class: com.addthis.bundle.util.AutoField
    # even though AutoField is an interface, it has static constructor methods we can use to do specialized
    # type resolution. In particular, this lets us use CachedField/FullAutoField depending on whether a path
    # string has what we consider splitting characters -- in retrospect, probably not worth it, but interesting.
    auto: AutoField
    field: auto
    _default: auto
    _array { _class: auto, _primary: pathAsList }

    cached: CachingField
    const: ConstantCopyField
    const-unsafe: ConstantField
    # index supports nested map/array access on top of a base field spec'd by index; index-strict only the latter
    index { _class: auto, _primary: path, parseIndex = true }
    index-strict: IndexField
    noop: NoopField
    ignored: noop
    /dev/null: noop
  }

  param-field = ${plugins.value-field} {
    _default: const-unsafe
    _array: null
  }

  typed-field {
    _class: com.addthis.bundle.util.TypedField
    _default: const

    const: ConstantTypedField
    field: DerivedTypedField
  }
}
